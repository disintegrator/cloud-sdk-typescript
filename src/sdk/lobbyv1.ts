/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LobbyV1 {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async createPrivateLobbyDeprecated(
        appId: string,
        local?: boolean,
        region?: shared.Region,
        config?: AxiosRequestConfig
    ): Promise<operations.CreatePrivateLobbyDeprecatedResponse> {
        const req = new operations.CreatePrivateLobbyDeprecatedRequest({
            appId: appId,
            local: local,
            region: region,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v1/{appId}/create/private", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] =
            "application/json;q=1, application/json;q=0.9, application/json;q=0.7, application/json;q=0.6, application/json;q=0.4, application/json;q=0.3, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreatePrivateLobbyDeprecatedResponse =
            new operations.CreatePrivateLobbyDeprecatedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.roomId = decodedRes;
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobbyDeprecated400ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobbyDeprecated401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobbyDeprecated404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobbyDeprecated422ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 429:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobbyDeprecated429ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobbyDeprecated500ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async createPublicLobbyDeprecated(
        appId: string,
        local?: boolean,
        region?: shared.Region,
        config?: AxiosRequestConfig
    ): Promise<operations.CreatePublicLobbyDeprecatedResponse> {
        const req = new operations.CreatePublicLobbyDeprecatedRequest({
            appId: appId,
            local: local,
            region: region,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v1/{appId}/create/public", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] =
            "application/json;q=1, application/json;q=0.9, application/json;q=0.7, application/json;q=0.6, application/json;q=0.4, application/json;q=0.3, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreatePublicLobbyDeprecatedResponse =
            new operations.CreatePublicLobbyDeprecatedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.roomId = decodedRes;
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobbyDeprecated400ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobbyDeprecated401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobbyDeprecated404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobbyDeprecated422ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 429:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobbyDeprecated429ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobbyDeprecated500ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async listActivePublicLobbiesDeprecated(
        appId: string,
        local?: boolean,
        region?: shared.Region,
        config?: AxiosRequestConfig
    ): Promise<operations.ListActivePublicLobbiesDeprecatedResponse> {
        const req = new operations.ListActivePublicLobbiesDeprecatedRequest({
            appId: appId,
            local: local,
            region: region,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v1/{appId}/list", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/json;q=0.7, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListActivePublicLobbiesDeprecatedResponse =
            new operations.ListActivePublicLobbiesDeprecatedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobbies = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.lobbies = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Lobby,
                        resFieldDepth
                    );
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listActivePublicLobbiesDeprecated401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listActivePublicLobbiesDeprecated404ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations to create and manage [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby).
 */
export class LobbyV2 {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create a new [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     */
    async createLobby(
        createLobbyRequest: shared.CreateLobbyRequest,
        appId: string,
        roomId?: string,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateLobbyResponse> {
        const req = new operations.CreateLobbyRequest({
            createLobbyRequest: createLobbyRequest,
            appId: appId,
            roomId: roomId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/create", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "createLobbyRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = {
            ...utils.getHeadersFromRequest(req),
            ...reqBodyHeaders,
            ...config?.headers,
        };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] =
            "application/json;q=1, application/json;q=0.9, application/json;q=0.7, application/json;q=0.6, application/json;q=0.4, application/json;q=0.3, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateLobbyResponse = new operations.CreateLobbyResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobby = utils.objectToClass(JSON.parse(decodedRes), shared.Lobby);
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLobby400ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLobby401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLobby404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLobby422ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 429:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLobby429ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLobby500ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async createLocalLobby(
        requestBody: operations.CreateLocalLobbyRequestBody,
        appId: string,
        roomId?: string,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateLocalLobbyResponse> {
        const req = new operations.CreateLocalLobbyRequest({
            requestBody: requestBody,
            appId: appId,
            roomId: roomId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/create/local", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = {
            ...utils.getHeadersFromRequest(req),
            ...reqBodyHeaders,
            ...config?.headers,
        };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] =
            "application/json;q=1, application/json;q=0.9, application/json;q=0.7, application/json;q=0.6, application/json;q=0.4, application/json;q=0.3, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateLocalLobbyResponse = new operations.CreateLocalLobbyResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobby = utils.objectToClass(JSON.parse(decodedRes), shared.Lobby);
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLocalLobby400ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLocalLobby401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLocalLobby404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLocalLobby422ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 429:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLocalLobby429ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createLocalLobby500ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async createPrivateLobby(
        requestBody: operations.CreatePrivateLobbyRequestBody,
        appId: string,
        roomId?: string,
        config?: AxiosRequestConfig
    ): Promise<operations.CreatePrivateLobbyResponse> {
        const req = new operations.CreatePrivateLobbyRequest({
            requestBody: requestBody,
            appId: appId,
            roomId: roomId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/create/private", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = {
            ...utils.getHeadersFromRequest(req),
            ...reqBodyHeaders,
            ...config?.headers,
        };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] =
            "application/json;q=1, application/json;q=0.9, application/json;q=0.7, application/json;q=0.6, application/json;q=0.4, application/json;q=0.3, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreatePrivateLobbyResponse =
            new operations.CreatePrivateLobbyResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobby = utils.objectToClass(JSON.parse(decodedRes), shared.Lobby);
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobby400ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobby401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobby404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobby422ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 429:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobby429ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPrivateLobby500ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async createPublicLobby(
        requestBody: operations.CreatePublicLobbyRequestBody,
        appId: string,
        roomId?: string,
        config?: AxiosRequestConfig
    ): Promise<operations.CreatePublicLobbyResponse> {
        const req = new operations.CreatePublicLobbyRequest({
            requestBody: requestBody,
            appId: appId,
            roomId: roomId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/create/public", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = {
            ...utils.getHeadersFromRequest(req),
            ...reqBodyHeaders,
            ...config?.headers,
        };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] =
            "application/json;q=1, application/json;q=0.9, application/json;q=0.7, application/json;q=0.6, application/json;q=0.4, application/json;q=0.3, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreatePublicLobbyResponse = new operations.CreatePublicLobbyResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobby = utils.objectToClass(JSON.parse(decodedRes), shared.Lobby);
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobby400ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 401:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobby401ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobby404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobby422ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 429:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobby429ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createPublicLobby500ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * Get details for an existing [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`.
     */
    async getLobbyInfo(
        appId: string,
        roomId: string,
        config?: AxiosRequestConfig
    ): Promise<operations.GetLobbyInfoResponse> {
        const req = new operations.GetLobbyInfoRequest({
            appId: appId,
            roomId: roomId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/info/{roomId}", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetLobbyInfoResponse = new operations.GetLobbyInfoResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobby = utils.objectToClass(JSON.parse(decodedRes), shared.Lobby);
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getLobbyInfo404ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }

    /**
     * Get all active [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby) for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Filter the array by optionally passing in a `region`.
     */
    async listActivePublicLobbies(
        appId: string,
        region?: shared.Region,
        config?: AxiosRequestConfig
    ): Promise<operations.ListActivePublicLobbiesResponse> {
        const req = new operations.ListActivePublicLobbiesRequest({
            appId: appId,
            region: region,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/list/public", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListActivePublicLobbiesResponse =
            new operations.ListActivePublicLobbiesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobbies = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.lobbies = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Lobby,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Set the state of a [lobby](https://hathora.dev/docs/concepts/hathora-entities#lobby) using `appId` and `roomId`. State is intended to be set by the server and must be smaller than 1MB.
     */
    async setLobbyState(
        security: operations.SetLobbyStateSecurity,
        setLobbyStateRequest: shared.SetLobbyStateRequest,
        appId: string,
        roomId: string,
        config?: AxiosRequestConfig
    ): Promise<operations.SetLobbyStateResponse> {
        const req = new operations.SetLobbyStateRequest({
            setLobbyStateRequest: setLobbyStateRequest,
            appId: appId,
            roomId: roomId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/lobby/v2/{appId}/setState/{roomId}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "setLobbyStateRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.SetLobbyStateSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0.7, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.SetLobbyStateResponse = new operations.SetLobbyStateResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.lobby = utils.objectToClass(JSON.parse(decodedRes), shared.Lobby);
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.setLobbyState404ApplicationJSONString = decodedRes;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.setLobbyState422ApplicationJSONString = decodedRes;
                }
                break;
        }

        return res;
    }
}
